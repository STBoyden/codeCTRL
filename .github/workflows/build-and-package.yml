name: Build
on:
  push:
    branches: [main]
  pull_request:

jobs:
  build-linux:
    name: Build for Linux
    strategy:
      matrix:
        os:
          - debian-latest
          - debian-sid
          - fedora-latest
          - fedora-rawhide
          - rhel-7
          - rhel-8
          - rhel-latest
          - ubuntu-20-04
          - ubuntu-latest
    runs-on: ubuntu-latest
    container: ghcr.io/stboyden/codectrl-pkg/${{ matrix.os }}:latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/checkout@v3
        with:
          repository: STBoyden/codectrl-protobuf-specifications
          path: crates/protobuf-bindings/protos

     - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly

      - name: Fetch cache if already exists
        continue-on-error: true
        uses: actions/cache@v3
        id: has-cache
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ matrix.os }}-${{ hashFiles('**/Cargo.lock') }}

      - if: steps.has-cache.outputs.cache-hit != 'true' && (contains(matrix.os, 'ubuntu') || contains(matrix.os, 'debian'))
        name: Install cargo-deb
        continue-on-error: true
        run: cargo install cargo-deb

      - if: steps.has-cache.outputs.cache-hit != 'true' && (contains(matrix.os, 'ubuntu') || contains(matrix.os, 'debian'))
        name: Build and package CodeCTRL for DEB-based systems
        shell: bash
        run: |
          cargo deb

      - if: steps.has-cache.outputs.cache-hit != 'true' && (contains(matrix.os, 'fedora') || contains(matrix.os, 'rhel'))
        name: Install cargo-generate-rpm
        continue-on-error: true
        run: cargo install cargo-generate-rpm

      - if: steps.has-cache.outputs.cache-hit != 'true'
        name: Build and package CodeCTRL for RPM-based systems
        shell: bash
        run: |
          cargo build --release
          strip -s target/release/codectrl
          cargo generate-rpm

      - if: steps.has-cache.outputs.cache-hit != 'true'
        name: Rename output
        run: ./find-and-rename-pkg.sh

      - if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'debian')
        name: Upload .deb artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }} package
          path: target/debian/*.deb

      - if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'debian')
        name: Upload .rpm artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }} package
          path: target/generate-rpm/*.rpm

  build-windows:
    name: Build for Windows
    strategy:
      matrix:
        version: [latest, 2019]
    runs-on: windows-${{ matrix.version }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/checkout@v3
        with:
          repository: STBoyden/codectrl-protobuf-specifications
          path: crates/protobuf-bindings/protos

      - name: Fetch cache if already exists
        continue-on-error: true
        uses: actions/cache@v3
        id: has-cache
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: windows-${{ matrix.version }}-${{ hashFiles('**/Cargo.lock') }}

      - if: steps.has-cache.outputs.cache-hit != 'true'
        name: Install cargo-wix
        continue-on-error: true
        run: cargo install cargo-wix

      - if: steps.has-cache.outputs.cache-hit != 'true'
        name: Build CodeCTRL
        run: cargo build --release

      - if: steps.has-cache.outputs.cache-hit != 'true'
        name: Generate MSI
        run: cargo wix --nocapture --no-build

      - name: Upload .msi artifact
        uses: actions/upload-artifact@v3
        with:
          name: Windows MSI package
          path: target/wix/*.msi

      - name: Cache binary
        uses: actions/cache@v3
        id: cache-binary
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: windows-${{ matrix.version }}-${{ hashFiles('**/Cargo.lock') }}

  all-in-one:
    name: Combine all generated packages
    runs-on: ubuntu-22.04
    needs:
      - build-linux
      - build-windows
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Upload Zip
        uses: actions/upload-artifact@v3
        with:
          name: All-in-One CodeCTRL Packages
          path: .
